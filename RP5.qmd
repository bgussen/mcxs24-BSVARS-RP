```{r function to calculate B0 and Bp for the Extension I model}

rgn_for_Extension_I_model = function(n,V,B0.initial){

   y   = Y
  
  # Basic settings and model dimensions
  N <- ncol(y)
  p <- 12   # This is the number of lags in the model
  K <- 1 + N * p

  # Set the priors
  kappa1 <- 0.01      # autoregressive slope shrinkage
  kappa2 <- 1         # constant term shrinkage 
  kappa3 <- 100       # contemporaneous effects shrinkage
  kappa4 <- 1         # VAR prior persistence
   

# create Y and X
############################################################
Y       = y[(p+1):nrow(y),]
X       = matrix(1,nrow(Y),1)
for (i in 1:p){
  X     = cbind(X,y[((p+1):nrow(y))-i,])
}

Y       = t(Y)
X       = t(X)
  
 
  priors <- list(
    B = cbind(rep(0, N), kappa4 * diag(N), matrix(0, N, (p - 1) * N)),
    Omega = diag(c(kappa2, kappa1 * ((1:p)^(-2)) %x% rep(1, N))),
    S = kappa3 * diag(N),
    nu = N
  )
  
   beta  = 5
  total = 0 
 
    A <- Y[ ,i]
    A <- matrix(A, ncol = 1)
    B <- X[ , i]
    B <- matrix(B, ncol = 1)
    C <- (B0_posterior1[ , , S]%*%A - Bp_posterior1[ , ,S]%*%B)
 
    partial_sum = t(C)%*%C
    total = total + partial_sum
  
  
  alpha = (beta - 2) + total
  
  N             = nrow(B0.initial)
  no.draws      = n
  
  B0            = array(NA, c(N,N,no.draws))
  B0.aux        = B0.initial
  
  for (i in 1:no.draws){
    
        # Sample lambda from the Inverse Gamma distribution

  lambda <- rinvgamma(n = 1, shape = alpha, rate = beta + nrow(y))
  
  lambda_posterior <- lambda

    # Compute posterior distribution parameters
  Omega.inv <- solve(priors$Omega)
  Omega.post.inv <-  ((lambda_posterior)^(-1) * X %*% t(X) +  Omega.inv)
  Omega.post <- solve(Omega.post.inv)
  B.post <-   ( (lambda_posterior)^(-1) * Y %*% t(X) +  priors$B %*% Omega.inv) %*% Omega.post
  S.post <-  solve( (lambda_posterior)^(-1) * Y %*% t(Y) +  solve(priors$S) + priors$B %*% Omega.inv %*% t(priors$B) - B.post %*% Omega.post.inv %*% t(B.post))
  nu.post <- nrow(y) + priors$nu
  
  posteriors <- list(
    B = B.post,
    Omega = Omega.post,
    S = S.post,
    nu = nu.post
  )

  S.inv = solve(S.post)
    
    for (n in 1:N){
      rn            = nrow(V[[n]])
      Un            = chol(nu*solve(V[[n]]%*%S.inv%*%t(V[[n]])))
      w             = t(orthogonal.complement.matrix.TW(t(B0.aux[-n,])))
      w1            = w %*% t(V[[n]]) %*% t(Un) / sqrt(as.numeric(w %*% t(V[[n]]) %*% t(Un) %*% Un %*% V[[n]] %*% t(w)))
      if (rn>1){
        Wn          = cbind(t(w1),orthogonal.complement.matrix.TW(t(w1)))
      } else {
        Wn          = w1
      }
      alpha         = rep(NA,rn)
      u             = rmvnorm(1,rep(0,nu+1),(1/nu)*diag(nu+1))
      alpha[1]      = sqrt(as.numeric(u%*%t(u)))
      if (runif(1)<0.5){
        alpha[1]    = -alpha[1]
      }
      if (rn>1){
        alpha[2:rn] = rmvnorm(1,rep(0,nrow(V[[n]])-1),(1/nu)*diag(rn-1))
      }
      bn            = alpha %*% Wn %*% Un
      B0.aux[n,]    = bn %*% V[[n]]
    }
    B0[,,i]         = B0.aux
  }
  
  return(B0)
}

```

